#!/usr/bin/env ruby

$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), *%w(.. lib)))

require "gsm"
require "mercenary"

Mercenary.program(:gsm) do |p|
  p.version Gsm::VERSION
  p.description "GSM Sources Manager"
  p.syntax "gsm <subcommand> [options]"

  conf_path = ""
  user_path = Dir.home()
  Dir.chdir(user_path) do
    if !Dir.exist?(".gsm")
      Dir.mkdir(".gsm")
    end
  end

  conf_path = "#{user_path}/.gsm/sources.yml"

  gem = Gsm::Gem.new(conf_path)

  p.command(:list) do |c|
    c.syntax "list"
    c.description "List all sources"

    c.action do |_, _|
      gem.sources.each do |name, url|
        use_mark = ""
        if gem.get == name
          use_mark = "(*)"
        end
        puts "#{name}: #{url} #{use_mark}"
      end
    end
  end

  p.command(:use) do |c|
    c.syntax "use [source]"
    c.description "Use source"

    c.action do |args, _|
      name = args[0]
      use = gem.use(name)
      if use
        puts "GSM: Source `#{use}` has been applied."
      else
        puts "GSM Error: Illegal source `#{name}`."
      end
    end
  end

  p.command(:add) do |c|
    c.syntax "add [name] [url]"
    c.description "Add source"

    c.option "use", "--use", "Add and use source"

    c.action do |args, opts|
      name = args[0]
      url = args[1]
      is_use = opts["use"]

      if gem.add(name, url)
        if is_use
          if !gem.use(name)
            puts "GSM Error: Illegal source `#{name}`."
          end
        end
      else
        puts "GSM Error: Illegal name/url."
      end
    end
  end

  p.command(:del) do |c|
    c.syntax "del [source]"
    c.description "Delete source"

    c.action do |args, _|
      name = args[0]
      ret = gem.del(name)
      if ret == false
        puts "GSM Error: Source is in use. Please switch to other source in advance."
        return
      elsif ret == nil
        puts "GSM Error: No source name with `#{name}`."
        return
      end
    end
  end

  p.command(:reset) do |c|
    c.syntax "reset"
    c.description "Reset all sources"

    c.action do |_, _|
      gem.reset
    end
  end

  p.command(:mirror) do |c|
    c.syntax "mirror [source]"
    c.description "Mirror source for Bundler"

    c.option "reset", "--reset", "Reset bundler mirror"

    c.action do |args, opts|
      if opts["reset"]
        Gsm::Bundle.reset
        return
      end

      if args.size == 0
        name = gem.get
        if name.empty?
          puts "GSM Error: no default source for mirror."
          return
        end
      else
        name = args[0]
      end
      Gsm::Bundle.mirror(gem.sources[name])
    end
  end

  p.command(:help) do |c|
    c.syntax "help"
    c.description "Show usage"

    c.action do |_, _|
      puts p
    end
  end

  p.default_command(:help)
end